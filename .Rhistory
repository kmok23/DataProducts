q()
download.file.method
q()
training <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")
setInternet2(TRUE)
training <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")
setInternet2(FALSE)
training <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")
training <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")
install.packages("RGtk2")
library(rattle)
install.packages("rattle")
install.packages("RGtk2")
install.packages("devtools")
installed.packages(RGtk2)
installed.packages("RGtk2")
install.packages("RGtk2")
library(RGtk2)
install.packages("rpart")
library(rpart)
4.222e+04
data(olive)
olive = olive[,-1]
library(pgmm)
data(olive)
olive = olive[,-1]
data(olive)
library(pgmm)
data(olive)
olive = olive[,-1]
data(olive)
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
View(newdata)
?predict
?trian
?train
library(caret)
?train
install.packages("rpart.plot")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
str(trainSA)
set.seed(13234)
modelFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family = "binomial", data = trainSA)
pred1 <- predict(modelFit, trainSA)
pred2 <- predict(modelFit, testSA)
pred1
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
str(vowel.test)
modelFit <- train(y ~ ., data = vowel.train, method = "rf")
modelFit <- train(y ~ ., data = vowel.train, method = "rf")
varImp(modelFit)
?varImp
varImp(modelFit, useModel = "rf")
modelFit <- train(y ~ ., data = vowel.train, method = "rf", importance = TRUE)
varImp(modelFit)
varImp(modelFit)
varImportance <- varImp(modelFit)
varImportance
vowel.train$y <- as.factor(vowel.train$y)
modelFit <- train(y ~ ., data = vowel.train, method = "rf", importance = TRUE)
varImp(modelFit)
varImp(modelFit)[,1]
varImportance <- varImp(modelFit)
str(varImportance)
varImp(modelFit)$1
varImp$1(modelFit)
dim(varImportance)
varImportance[1,1]
varImportance
varImportance(1)
varImportance$1
varImportance$x.1
coef(varImportance)
varImportance$importance
modelFit
modelFit2 <- train(y ~ ., data = vowel.test, method = "rf", importance = TRUE)
varImportance2 <- varImp(modelFit2)
varImportance2
vowel.test$y <- as.factor(vowel.test$y)
modelFit2 <- train(y ~ ., data = vowel.test, method = "rf", importance = TRUE)
varImportance2 <- varImp(modelFit2)
varImportance2
importance(modelFit)
varImportance2$importance
sapply(varImportance$importance, mean, 2)
sapply(varImportance$importance, mean, 1)
?sapply
lapply(varImportance$importance, mean, 2)
lapply(varImportance$importance, mean, 1)
sapply(varImportance$importance, 1, mean)
apply(varImportance$importance, 1, mean)
apply(varImportance$importance, 2, mean)
apply(varImportance$importance, 1, mean)
order(apply(varImportance$importance, 1, mean), descending = TRUE)
apply(varImportance$importance, 1, mean)
apply(varImportance$importance, 1, mean)[2,]
apply(varImportance$importance, 1, mean)[1]
str(apply(varImportance$importance, 1, mean))
apply(varImportance$importance, 1, mean)$names
str(apply(varImportance$importance, 1, mean))
rowMeans(varImportance$importance)
str(rowMeans(varImportance$importance))
class(rowMeans(varImportance$importance))
sort(rowMeans(varImportance$importance), decreasing = TRUE)
set.seed(33833)
modelFit <- randomForest(y ~ ., data = vowel.train, importance = TRUE)
varImportance <- varImp(modelFit)
sort(rowMeans(varImportance$importance), decreasing = TRUE)
varImportance$importance
varImportance
modelFit
varImportance
rowMeans(varImportance)
varImportance[,1]
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
str(segmentationOriginal)
trainIndex <- segmentationOriginal$Case == "Train"
training <- segmentationOriginal[trainIndex, ]
testing <- segmentationOriginal[-trainIndex, ]
str(training)
str(testing)
trainIndex <- segmentationOriginal$Case == "Train"
training <- segmentationOriginal[trainIndex, ]
testing <- segmentationOriginal[!trainIndex, ]
str(testing)
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
str(olive)
summary(olive)
subset(olive, select = 'Area')
factor(olive$Area)
install.packages("RCurl")
testurl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
setInternet2(use = TRUE)
download.file(testurl, "pml-testing.csv")
testraw <- read.csv("pml-testing.csv")
exists(testraw)
exists("testraw")
?exists
setwd("~/R/MachineLearning")
install.packages("gbm")
install.packages(lubridate)
install.packages("lubridate")
install.packages("forecast")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train <- as.factor(vowel.train$y)
vowel.test <- as.factor(vowel.test$y)
set.seed(33833)
modelRF <- train(y ~ ., data = vowel.train, method = "rf")
modelGBM <- train(y ~ ., data = vowel.train, method = "gbm")
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modelRF <- train(y ~ ., data = vowel.train, method = "rf")
modelGBM <- train(y ~ ., data = vowel.train, method = "gbm")
modelRF
modelGBM
predictionRF <- predict(modelRF, vowel.test)
predictionGBM <- predict(modelGBM, vowel.test)
confusionRF <- confusionMatrix(predictionRF, vowel.test$y)
confusionGBM <- confusionMatrix(predictionGBM, vowel.test$y)
confusionRF
confusionGBM
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modelRF <- train(y ~ ., data = vowel.train, method = "rf")
predictionRF <- predict(modelRF, vowel.test)
modelGBM <- train(y ~ ., data = vowel.train, method = "gbm")
predictionGBM <- predict(modelGBM, vowel.test)
confusionRF <- confusionMatrix(predictionRF, vowel.test$y)
confusionGBM <- confusionMatrix(predictionGBM, vowel.test$y)
confusionRF
confusionGBM
predictionRF
?which
which(predictionRF == predictionGBM)
vowel.test[which(predictionRF == predictionGBM)]
vowel.test[which(predictionRF == predictionGBM), ]
str(confusionMatrix)
str(confusionRF)
newvowel.test <- vowel.test[which(predictionRF == predictionGBM), ]
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
install.packages("manipulate")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
myPlot()
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
install.packages("rcharts")
require(devtools)
install_github('rCharts', 'ramnathv')
dTable(airquality, sPaginationType = "full_numbers")
?dTable
d <- data.frame(airquality, stringsAsFactors = FALSE) print(d)
d <- data.frame(airquality, stringsAsFactors = FALSE)
print(d)
airquality
airquality
?airquality
install.packages("shiny")
library(shiny)
runExample("01_hello")
setwd("~/R/DataProducts")
runApp("App-1")
runApp("App-1")
runApp("App-1", display.mode = "showcase")
library(shiny)
h1("My title")
runApp("App-1")
h6("Episode IV", align = "center"),
h6("Episode IV", align = "center")
shiny::runApp('App-1')
shiny::runApp('census-app')
runApp("census-app")
install.packages(c("maps", "mapproj"))
install.packages("maps")
libary(maps)
library(maps)
install.packages(c("maps", "mapproj"))
library(maps)
library(mapproj)
source("census-app/helpers.R")
counties <- readRDS("census-app/data/counties.rds")
percent_map(counties$white, "darkgreen", "% white")
colors()
shiny::runApp('census-app')
